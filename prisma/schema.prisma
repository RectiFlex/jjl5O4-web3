//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

enum ReviewStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum BuildStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus        @default(VERIFIED)
  globalRole       String            @default("USER")
  /// @password
  /// @omit
  password         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
  pwaSubscriptions PwaSubscription[] @relation("user")
  projects         Project[]         @relation("user")
  investments      Investment[]      @relation("user")
  wallets          Wallet[]          @relation("user")
  transactions     Transaction[]     @relation("user")
}

/// @@allow('all', true)
model Project {
  id             String       @id() @default(uuid())
  name           String
  description    String?
  category       String?
  blockchain     String?
  buildStatus    BuildStatus  @default(NOT_STARTED)
  reviewStatus   ReviewStatus @default(PENDING_REVIEW)
  reviewFeedback String?
  tokenPrice     String?
  launchDate     String?
  fundingGoal    String?
  currentFunding String?
  whitepaperUrl  String?
  userId         String
  user           User?        @relation(fields: [userId], references: [id], name: "user")
  teamMembers    TeamMember[] @relation("project")
  tokenSales     TokenSale[]  @relation("project")
  investments    Investment[] @relation("project")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TeamMember {
  id         String   @id() @default(uuid())
  name       String
  role       String?
  bio        String?
  pictureUrl String?
  projectId  String
  project    Project? @relation(fields: [projectId], references: [id], name: "project")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TokenSale {
  id                  String   @id() @default(uuid())
  totalSupply         String?
  distributionDetails String?
  saleStartDate       String?
  saleEndDate         String?
  minAllocation       String?
  maxAllocation       String?
  projectId           String
  project             Project? @relation(fields: [projectId], references: [id], name: "project")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Investment {
  id          String   @id() @default(uuid())
  amount      String?
  status      String?
  claimStatus String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  projectId   String
  project     Project? @relation(fields: [projectId], references: [id], name: "project")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Wallet {
  id        String   @id() @default(uuid())
  address   String
  network   String?
  balance   String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Transaction {
  id            String   @id() @default(uuid())
  type          String?
  amount        String?
  status        String?
  walletAddress String?
  network       String?
  userId        String
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
